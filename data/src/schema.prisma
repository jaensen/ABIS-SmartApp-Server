// This is your Prisma schema file,
// learn more about it in the docs https://pris.ly/d/prisma-schema

datasource db {
    provider = "postgresql"
    url      = "postgresql://postgres:abis@localhost:5432/abis?schema=public"
}

generator client {
    provider = "prisma-client-js"
}

enum UserType {
    Person
    System
}

model User {
    id Int @default(autoincrement()) @id

    type UserType

    createdAt DateTime @default(now())
    @@unique([createdAt, id], name: "UX_User_CreatedAt_Id")
    
    createdBy User? @relation("UserCreatesUsers", fields: [createdByUserId], references: [id])
    createdByUserId Int?
 	createdByRequestId String

    updatedAt DateTime?

    email String @unique
    timezoneOffset Float

    firstName String?
    lastName String?

    challenge String?
    passwordHash String?

    createdAgents Agent[] @relation("UserCreatesAgents")
    createdUsers User[] @relation("UserCreatesUsers")
    ownedAgents Agent[] @relation("UserOwnsAgents")
    sessions Session[] @relation("UserHasSessions")
}

enum AgentType {
    Profile
    Companion
    Singleton
}

model Agent {
    id Int @default(autoincrement()) @id

    type AgentType

    createdAt DateTime @default(now())
    @@unique([createdAt, id], name: "UX_Agent_CreatedAt_Id")
    
    createdBy User @relation("UserCreatesAgents", fields: [createdByUserId], references: [id])
    createdByUserId Int
 	createdByRequestId String

    updatedAt DateTime?

    owner User @relation("UserOwnsAgents", fields: [ownerUserId], references: [id])
    ownerUserId Int
    @@unique([ownerUserId, id], name: "UX_Agent_OwnerUserId_Id")

    implementation String // the path to the implementation relative to the /src/agents-directory

    name String

    timezoneOffset Float?

    createdGroups Group[] @relation("AgentCreatesGroups")
    ownedGroups Group[] @relation("AgentOwnsGroups")
    closedGroups Group[] @relation("AgentClosesGroups")

    createdMemberships Membership[] @relation("AgentCreatesMemberships")
    memberships Membership[] @relation(name: "MembershipMemberAgent")

    createdEntries Entry[] @relation("AgentCreatesEntries")
    ownedEntries Entry[] @relation(name: "AgentOwnsEntries")

    sessions Session[] @relation("AgentHasSessions")
}

enum GroupType {
    // Stash A private space.
    // NOTE A group of this type must have no memberships.
    // NOTE No stash contains Entries from an "owner" other than the Stash-"owner".
    Stash

    // Channel A uni-directional way to the communicate between two Agents.
    //          If two Agents want to communicate bi-directional,
    //          there must be two channels. One per direction and Agent.
    //          In the UI, the two channels should be joined together and
    //          ordered by creation timestamp of their Entries.
    // NOTE A Channel always has exactly one Membership.
    // NOTE All Channel-Memberships must be created by the Channel-owner.
    // NOTE There must be no two Channels with the same "owner" and "membership" combination.
    // NOTE No Channel contains Entries from an "owner" other than the Channel-"owner".
    Channel

    // Room A public or closed Group of Agents.
    // NOTE Every Room has a Inbox.
    // NOTE No not-public Room has Memberships that have been self-created by (creator == member).
    Room

    // A readonly Room (only owner can write) with non-disclosed membership list.
    // This group type is used for Share resources that need to be accessible by many agents.
    Share
}

model Group {
    id Int @default(autoincrement()) @id

    type GroupType
    volatile Boolean // When true, the items in the group won't be stored. Instead they're only send via event.

    createdAt DateTime @default(now())
    @@unique([createdAt, id], name: "UX_Group_CreatedAt_Id")
    
    createdBy Agent @relation("AgentCreatesGroups", fields: [createdByAgentId], references: [id])
    createdByAgentId Int
 	createdByRequestId String

    updatedAt DateTime?

    closedAt DateTime? // when the group is closed, this field contains when it was closed.
                       // If the group is a memory group, all contents will be gone after close,
                       // else the group will be "archived" and the entries remain (TBD: accessible by ?).
    closedBy Agent? @relation("AgentClosesGroups", fields: [closedByAgentId], references: [id])
    closedByAgentId Int?

    owner Agent @relation("AgentOwnsGroups", fields: [ownerAgentId], references: [id])
    ownerAgentId Int
    @@unique([ownerAgentId, id], name: "UX_Group_OwnerAgentId_Id")

    // TODO: Is the companion agent really necessary??
    companion Agent? @relation("GroupHasServiceAgent", fields: [companionAgentId], references: [id])
    companionAgentId Int?

    lastState String? // Only valid for "type == GroupType.Channel". If the channel represents a process, this field contains the last known state of that process.
    isPublic Boolean // Only valid for "type == GroupType.Room | GroupType.Broadcast"

    timeout DateTime? // The point in time when the group should automatically be closed. Will always add an error entry as warteAufLeistungsErbringung entry to the group.

    name String


    memberships Membership[] @relation(name: "GroupHasMemberships")

    entries Entry[] @relation(name: "GroupHasEntries")
    contentConstraints ContentConstraint[]

    lastEntryType EntryType?
    lastEntryDefinition String?
}

model ContentConstraint {
    id Int @default(autoincrement()) @id

    includeDefinition String?
    excludeDefinition String?
}

enum MembershipType {
    // Someone invited someone else to this group but that person didn't converted
    // this invite to a single- or multi-membership.
    Invite
    // Single Indicates that a User has only one Membership
    //         via a "Profile"- or "Service"-Agent in the same Group.
    Single
    // Multi Indicates that a User has multiple Memberships
    //        via a "Profile"- or "Service"-Agent in the same Group.
    Multi
}

model Membership {
     // NOTE Every Membership must be exactly in one Group.

     // The MembershipStatus (status) -field and enum have been removed
     // because now Group-owners can handle their Membership-requests via
     // the Groups' Inbox.
    id Int @default(autoincrement()) @id

    type MembershipType

    createdAt DateTime @default(now())
    @@unique([createdAt, id], name: "UX_Membership_CreatedAt_Id")
    
    createdBy Agent @relation("AgentCreatesMemberships", fields: [createdByAgentId], references: [id])
    createdByAgentId Int
 	createdByRequestId String

    group Group @relation(name: "GroupHasMemberships", fields: [groupId], references:[id])
    groupId Int
    @@unique([groupId, id], name: "UX_Memberhip_GroupId_Id")

    member Agent  @relation(name: "MembershipMemberAgent", fields: [memberAgentId], references: [id])
    memberAgentId Int
    @@unique([memberAgentId, id], name: "UX_Memberhip_MemberAgentId_Id")

    showHistory Boolean
}

enum EntryType {
    Empty
    Data
    Definition
}

model Entry {
    // NOTE All Entries must be in the "entries"-list of exactly one Group
    id Int @default(autoincrement()) @id

    type EntryType

    createdAt DateTime @default(now())
    @@unique([createdAt, id], name: "UX_Entry_CreatedAt_Id")

    createdBy Agent @relation("AgentCreatesEntries", fields: [createdByAgentId], references: [id])
    createdByAgentId Int
 	createdByRequestId String

    updatedAt DateTime?

    owner Agent @relation("AgentOwnsEntries", fields: [ownerAgentId], references: [id])
    ownerAgentId Int
    @@unique([ownerAgentId, id], name: "UX_Entry_OwnerAgentId_Id")

    group Group @relation(name: "GroupHasEntries", fields: [groupId], references:[id])
    groupId Int
    @@unique([groupId, id], name: "UX_Entry_GroupId_Id")

    name String

    definition String? // A URI in the form of 'abis-schema://system@abis.internal/authenticationServicedefinitions/signup' that points to some 'Definition'-Entry.

    data Json
}

model Session {
 	id Int      @id @default(autoincrement())

 	createdByRequestId String
 	createdAt DateTime @default(now())
    @@unique([createdAt, id], name: "UX_Session_CreatedAt_Id")

 	updatedAt DateTime?

 	timezoneOffset Float?

 	validTo DateTime

 	timedOutAt DateTime?
 	loggedOutAt DateTime?

 	revokedAt DateTime?
 	revokedReason String?

 	user User @relation(name: "UserHasSessions", fields: [userId], references: [id])
 	userId Int

 	agent Agent @relation(name: "AgentHasSessions", fields: [agentId], references: [id])
 	agentId Int
}